using System;
using InkedUp.Domain;
using Xunit;

namespace InkedUp.Tests
{
    public class PenTest
    {
        private readonly Pen _pen;
        private readonly BottleOfInk _bottleOfInk;
        private readonly PenInkName _penInkName;

        public PenTest()
        {
            _pen = new Pen(new PenId(Guid.NewGuid()),
                new UserId(Guid.NewGuid()));
            
            _bottleOfInk = new BottleOfInk(
                new BottleOfInkId(Guid.NewGuid()), 
                new UserId(Guid.NewGuid())
            );
            _bottleOfInk.UpdateManufacturer(BottleOfInkManufacturer.FromString("Montblanc"));
            _bottleOfInk.UpdateColour(BottleOfInkColour.FromString("Irish Green"));
            
            _penInkName = PenInkName.FromBottleOfInk(_bottleOfInk);
        }
        
        [Fact]
        public void Can_ink_up_a_valid_pen()
        {
            _pen.UpdateManufacturer(PenManufacturer.FromString("Montblanc"));
            _pen.UpdateModel(PenModel.FromString("149"));
            
            _pen.InkUp(_bottleOfInk);
            
            Assert.Equal(_pen.InkName, _penInkName);
            Assert.Equal(_pen.State, Pen.PenState.InkedUp);
        }
        
        [Fact]
        public void Cannot_ink_up_a_pen_without_a_manufacturer()
        {
            _pen.UpdateModel(PenModel.FromString("149"));

            Assert.Throws<InvalidEntityStateException>(() =>
                _pen.InkUp(_bottleOfInk));
        }
        
        [Fact]
        public void Cannot_ink_up_a_pen_without_a_model()
        {
            _pen.UpdateManufacturer(PenManufacturer.FromString("Montblanc"));

            Assert.Throws<InvalidEntityStateException>(() =>
                _pen.InkUp(_bottleOfInk));
        }
        
        [Fact]
        public void Cannot_ink_up_a_pen_without_a_bottle_of_ink()
        {
            _pen.UpdateManufacturer(PenManufacturer.FromString("Montblanc"));
            _pen.UpdateModel(PenModel.FromString("149"));
            
            Assert.Throws<ArgumentException>(() =>
                _pen.InkUp(null));
        }
    }
}